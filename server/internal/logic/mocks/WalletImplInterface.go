// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	dao "github.com/julkhong/walletapp/server/internal/dao"

	mock "github.com/stretchr/testify/mock"
)

// WalletImplInterface is an autogenerated mock type for the WalletImplInterface type
type WalletImplInterface struct {
	mock.Mock
}

// Deposit provides a mock function with given fields: ctx, walletID, amount
func (_m *WalletImplInterface) Deposit(ctx context.Context, walletID string, amount float64) error {
	ret := _m.Called(ctx, walletID, amount)

	if len(ret) == 0 {
		panic("no return value specified for Deposit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, float64) error); ok {
		r0 = rf(ctx, walletID, amount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetBalance provides a mock function with given fields: ctx, walletID
func (_m *WalletImplInterface) GetBalance(ctx context.Context, walletID string) (float64, error) {
	ret := _m.Called(ctx, walletID)

	if len(ret) == 0 {
		panic("no return value specified for GetBalance")
	}

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (float64, error)); ok {
		return rf(ctx, walletID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) float64); ok {
		r0 = rf(ctx, walletID)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, walletID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactionHistory provides a mock function with given fields: ctx, walletID, txType, start, end, limit, offset
func (_m *WalletImplInterface) GetTransactionHistory(ctx context.Context, walletID string, txType string, start string, end string, limit int, offset int) ([]dao.Transaction, error) {
	ret := _m.Called(ctx, walletID, txType, start, end, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionHistory")
	}

	var r0 []dao.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, int, int) ([]dao.Transaction, error)); ok {
		return rf(ctx, walletID, txType, start, end, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, int, int) []dao.Transaction); ok {
		r0 = rf(ctx, walletID, txType, start, end, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dao.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string, int, int) error); ok {
		r1 = rf(ctx, walletID, txType, start, end, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Transfer provides a mock function with given fields: ctx, fromWalletID, toWalletID, amount
func (_m *WalletImplInterface) Transfer(ctx context.Context, fromWalletID string, toWalletID string, amount float64) error {
	ret := _m.Called(ctx, fromWalletID, toWalletID, amount)

	if len(ret) == 0 {
		panic("no return value specified for Transfer")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, float64) error); ok {
		r0 = rf(ctx, fromWalletID, toWalletID, amount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Withdraw provides a mock function with given fields: ctx, walletID, amount
func (_m *WalletImplInterface) Withdraw(ctx context.Context, walletID string, amount float64) error {
	ret := _m.Called(ctx, walletID, amount)

	if len(ret) == 0 {
		panic("no return value specified for Withdraw")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, float64) error); ok {
		r0 = rf(ctx, walletID, amount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewWalletImplInterface creates a new instance of WalletImplInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWalletImplInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *WalletImplInterface {
	mock := &WalletImplInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
